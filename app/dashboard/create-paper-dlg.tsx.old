"use client";

import {useState, useEffect, useContext} from "react";
import  SupabaseContext  from "components/context/supabase-context";
import {Class} from 'types/alias';
import {User} from '@supabase/supabase-js';
import DialogTitle from '@mui/material/DialogTitle';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import TextField from '@mui/material/TextField';
import Select, { SelectChangeEvent } from '@mui/material/Select';
import MenuItem from '@mui/material/MenuItem';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import {DateTime} from 'luxon';
import {Paper} from 'types/alias';

import { useFilePicker } from 'use-file-picker';

import Button from "@mui/material/Button";
import { UserResponse } from "@supabase/supabase-js";

type ClassParam = Class | null | undefined;


type CreatePaperDlgProps = {
    open: boolean;
    onClose: () => void;
    onCreatePaper: (p: Paper) => void;
  }
  
  const CreatePaperDlg = ( {open, onClose, onCreatePaper} : CreatePaperDlgProps) => {
        const [title, setTitle] = useState('');
        const [year, setYear] = useState('');
        const [month, setMonth] = useState('');
        const [subject, setSubject] = useState('');
        const [paper, setPaper] = useState('');
        const [availableDate, setAvailableDate] = useState(DateTime.now());
        const [completeDate, setCompleteDate] = useState(DateTime.now().plus({days: 7}));
        const [markByDate, setMarkByDate] = useState(DateTime.now().plus({days: 8}));
        const [status, setStatus] = useState('not ready');
        const [specId, setSpecId] = useState<number | null>(null);
        const [marks, setMarks] = useState<number | null>(0);
        const [user, setUser] = useState<User | undefined>(undefined);

        //const {specs} = useContext<UserContextType>(UserContext);
        const [specs, setSpecs] = useState(null);
        
        const {supabase} = useContext(SupabaseContext);
         
  
        const [openFileSelector, { filesContent, loading }] = useFilePicker({
          accept: '.pdf',
        });

        const handleOnAddClass = async (c:ClassParam) => {

            if (!supabase)
              return;
    
            const {data, error} = await supabase.from("ClassMembership")
                                                .insert({classId: c!.id, pupilId: user!.id})
                                                .select();
    
            error && console.error(error);
            
            // loadClasses!()        
            
        }
  
        const handleFileOpen = async () => {
  
          try {
            // you can also get values directly from the openFileSelector
            const result = openFileSelector();
            
          } catch (err) {
            console.log(err);
            console.log('Something went wrong or validation failed');
          }
        }
  
  
        const handleOnCreatePaper = async () => {
        
          setStatus("Creating Paper")

          if (!supabase)
            return;
          
          const {data: createPaperData, error: createPaperError} = await supabase?.from("Papers")
                                                                  .insert({
                                                                    month: month, 
                                                                    year: year,
                                                                    marks: marks,
                                                                    title: title,
                                                                    paper: paper,
                                                                    subject: subject,
                                                                    specId: specId})
                                                                  .select();
  
          createPaperError && console.error(createPaperError);
  
          if (!createPaperData) return;
  
          console.log("CreatePaperData", createPaperData);
  
          setStatus(`Created paper ${createPaperData[0].id}`);
  
          /*
          const uploadFile = e.target.files[0];
          const {data, error} = await supabase
                                          .storage
                                          .from('exam-papers')
                                          .upload(`/${user!.id}/${paperId}/${uploadFile.name}`, uploadFile, {
                                              cacheControl: '3600',
                                              upsert: false
                                              });
          */
             
          
          for (const file of filesContent){
  
            const {data: fileUploadData, error:fileUploadError} = await supabase.storage.from("exam-papers")
                                    .upload(`/0-test-${createPaperData[0].id}/${file.name}`,file);
            
            
            fileUploadError && console.error(fileUploadError); 
  
            if (fileUploadData){
              console.log("Upload Data", fileUploadData)
            }
  
          }
          
          // onCreatePaper && onCreatePaper(p);
        }

        useEffect(()=> {
          const loadUser = async () => {
            const a
            const {user} = await supabase?.auth.getUser();
            setUser(user);
          }
          
        }, [])
  
        useEffect(()=> {
          {//@ts-ignore
            specs && setSpecId(specs[0].id);
          }
        }, [specs])

        useEffect (()=> {
          console.log("Checking")
          if (title !== '' && 
              year !== '' && 
              month !== '' && 
              subject !== '' &&
              paper !== '' && 
              filesContent.length > 0) {
            setStatus('valid')
          }
  
        }, [title, year, month, subject, paper, filesContent])
  
        return  <>
                  <Dialog open={open} onClose={onClose}>
                  <DialogTitle>Creating a Paper</DialogTitle>
                  <DialogContent>
                    <DialogContentText>Creating a new Paper</DialogContentText>
                    <div className="form-layout">
                      <TextField
                        label="Year"
                        value={year}
                        size="small"
                        onChange={(e:any) => {setYear(e.target.value);}}
                      />
  
                      <TextField
                        label="Month"
                        value={month}
                        size="small"
                        onChange={(e:any) => {setMonth(e.target.value);}}
                      />
  
                      <TextField
                        label="Subject"
                        value={subject}
                        size="small"
                        onChange={(e:any) => {setSubject(e.target.value);}}
                      />
                    
                      <TextField
                        label="paper"
                        value={paper}
                        size="small"
                        onChange={(e:any) => {setPaper(e.target.value);}}
                      />
  
                      <TextField
                        label="Title"
                        value={title}
                        size="small"
                        onChange={(e:any) => {setTitle(e.target.value);}}
                      />
                      <TextField
                        label="Marks"
                        value={marks}
                        size="small"
                        onChange={(e:any) => {setMarks(e.target.value);}}
                      />
                    
                    
                      <Select value={specId?.toString()} onChange={(v: SelectChangeEvent) => setSpecId(parseInt(v.target.value))}>
                        { //@ts-ignore
                          specs && specs.map((s:Spec, i) => <MenuItem key={i} value={s.id}>{s.title}</MenuItem>)
                        }
                      </Select>
                    
                  </div>
  
                  <div>
                      <Button onClick={handleFileOpen}>Select Files</Button>
                      <ul >
                      {
                      filesContent.map((file, index) => (
                          <li key={index}>{file.name}</li>
                      ))
              
                      }
                      </ul>
                  </div>
  
                  <div>{status}</div>
        
                  </DialogContent>
                  <DialogActions>
                    <Button onClick={onClose}>Cancel</Button>
                    <Button 
                      disabled={status !== 'valid'} 
                      onClick={handleOnCreatePaper}>Create</Button>
                  </DialogActions>
                </Dialog>
                <style jsx={true}>{`
                  .form-layout {
                    display : grid;
                    grid-template-columns: 1fr;
                    grid-gap: 1rem;
                    flex-direction: column;
                  }
  
                  .form-layout > * {
                    margin: 1rem;
                  }
                `}
                </style>
                </>
  }


  export default CreatePaperDlg;
  
  